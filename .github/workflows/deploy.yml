name: CI/CD Pipeline

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          port: ${{ secrets.VM_PORT_EXT }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            # --- Directory Setup ---
            echo "=== Setting up directory ==="
            sudo mkdir -p /srv/portfolio
            sudo chown -R gitdeployer:gitdeployer /srv/portfolio
            ls -ld /srv/portfolio  # Verify ownership

            # --- Navigate to Directory ---
            echo "=== Moving to project directory ==="
            cd /srv/portfolio
            pwd  # Confirm working directory

            # --- Clone/Pull Repository ---
            echo "=== Updating repository ==="
            if [ -d .git ]; then
              echo "Pulling latest changes..."
              git pull origin master
            else
              echo "Cloning repository..."
              git clone https://github.com/atefalvi/v3pf.git .
            fi
            git log -1 --oneline  # Show latest commit

            # --- Environment File Setup ---
            echo "=== Writing .env file ==="
            echo "${{ secrets.ENV_FILE }}" > .env  # Use base64 decode
            ls -la .env  # Verify file exists
            head -n 3 .env  # Preview first 3 lines (no secrets leaked)

            # --- Docker Operations ---
            echo "=== Rebuilding Docker containers ==="
            echo "Stopping existing containers..."
            docker compose down || echo "No containers to stop."

            echo "Building containers..."
            docker compose build --pull --no-cache

            echo "Starting containers..."
            docker compose up -d --force-recreate

            echo "=== Container Status ==="
            docker ps -a  # Show all containers (running/exited)

            # --- Cleanup ---
            echo "=== Cleaning up Docker artifacts ==="
            docker system prune -f
            echo "Deployment completed!"
